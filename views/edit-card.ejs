<html lang="en">

<%- include('./partials/head.ejs') %>

<body>
  <%- include('./partials/header.ejs') %>
  <%- include('./partials/nav.ejs') %>

  <div class="create-set-container"> 

    <form action="/edit-card" method="POST" id="card-update-form" name="card-update-form">
      
      <div class="card-input">
        <label for="question">Question:</label>
        <input type="text" id="question" name="question" required>
  
        <label for="answer">Answer:</label>
        <input type="text" id="answer" name="answer" required>
  
        <label for="link">Add Link:</label>
        <input type="text" id="link">
        <button class="add-link-button" type="button">Add Link</button>
        <div class="added-links">
          <p>Added links will appear here.</p>
        </div>

        <div class="">
          <input type="text" id="cardId" name="cardId"></input>
          <input class="hidden-links-input" name="links"></input>
          <input type="text" id="subcategory" name="subcategory"></input>
          <input type="text" id="title" name="title"></input>

        </div>
        
        <button class="save-card-button">Save Card</button>
      </div>
    </form>

  </div>

  <%- include('./partials/footer.ejs') %>

  <script>
    const storedCardInfo = JSON.parse(sessionStorage.storedCardInfo)
    const storedSetInfo = JSON.parse(sessionStorage.storedSetInfo)

    console.log("from view stored card info: ", storedCardInfo)
       
    // pre populate inputs with previous vals and submit any updated vals
    document.forms['card-update-form']['question'].value = storedCardInfo.question
    document.forms['card-update-form']['answer'].value = storedCardInfo.answer
    document.forms['card-update-form']['cardId'].value = storedCardInfo.cardId
    document.forms['card-update-form']['subcategory'].value = storedSetInfo.subcategory
    document.forms['card-update-form']['title'].value = storedSetInfo.title

    // ADD LINKS TO LINK DISPLAY DIV ON "ADD"
    //elements
    const link = document.getElementById('link')
    const addLinkButton = document.querySelector('.add-link-button')
    const addedLinksDiv = document.querySelector('.added-links')
    const hiddenLinksInput = document.querySelector('.hidden-links-input')
    const saveCardButton = document.querySelector('.save-card-button')

    const updateLinksInput = () => {
    const links = document.querySelectorAll('.added-links a')
    hiddenLinksInput.value = ''
    links.forEach(link => {
      hiddenLinksInput.value += `${link.href}, `
    })
  }

    // pre populate links div with previous links
    if (storedCardInfo.links !== '') {
      addedLinksDiv.innerText = ''
      storedCardInfo.links.split(',').forEach(link => {
        if (link === "") return
        addedLinksDiv.innerHTML += `
          <a href=${link}>${link.slice(0, 27)}</a><span class="material-symbols-outlined link-trash">delete</span><br>`
        updateLinksInput()
        const trashcans = document.querySelectorAll('.link-trash')
        trashcans.forEach(can => {
          can.addEventListener('click', () => {
            can.previousSibling.remove()
            can.remove()
            updateLinksInput()
          })
        })
      })
    }

    const validateLink = (link) => {
    const www = link.slice(0, 3).search("www")
    if (www != -1) {
      return `https://${link}`
    }
    const https = link.search("https://www.")
    const http = link.search("http://www.")
    if (https === -1 && http === -1) {
      return `https://www.${link}`
    } 
    return link
  }

    addLinkButton.addEventListener('click', () => {
      if (addedLinksDiv.innerText === "Added links will appear here.") {
        addedLinksDiv.innerText = ''
      }

      let ValidatedLink = validateLink(link.value)
      addedLinksDiv.innerHTML += `
      <a href=${ValidatedLink}>${ValidatedLink.slice(0, 27)}</a><span class="material-symbols-outlined link-trash">delete</span><br>`
      link.value = ''
      updateLinksInput()

      // add listener to trashcans
      const trashcans = document.querySelectorAll('.link-trash')
      trashcans.forEach(can => {
        can.addEventListener('click', () => {
          can.previousSibling.remove()
          can.remove()
          updateLinksInput()
        })
      })
    })

  </script>